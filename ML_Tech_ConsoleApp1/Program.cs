
//// This file was auto-generated by ML.NET Model Builder. 

//using ML_Tech_ConsoleApp1;
//using Newtonsoft.Json;
//using System.IO;
//using System.Net.Http.Headers;

//// Create single instance of sample data from first line of dataset for model input
//var imageBytes = File.ReadAllBytes(@"C:\Users\georg\source\repos\PriceGo\Test\png-transparent-condenser-microphone-and-pop-filter-microphone-radio-station-television-microphone-electronics-internet-sound-thumbnail.png");
//ML_Tech.ModelInput sampleData = new ML_Tech.ModelInput()
//{
//    ImageSource = imageBytes,
//};

//// Make a single prediction on the sample data and print results.
//var sortedScoresWithLabel = ML_Tech.PredictAllLabels(sampleData);
////Console.WriteLine($"{"Class",-40}{"Score",-20}");
////Console.WriteLine($"{"-----",-40}{"-----",-20}");

//foreach (var score in sortedScoresWithLabel)
//{
//    Console.WriteLine($"{score.Key,-40}{score.Value,-20}");
//}

using System;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Collections.Generic;
using ML_Tech_ConsoleApp1;
using static System.Net.WebRequestMethods;

class Program
{
    static string FileName;
    static string FilePath;
    static async Task Main()
    {
        string folderPath = @"C:\PriceGo_server_published\PriceGo2\ML_Tech_ConsoleApp1\ImageData\Source";
        using FileSystemWatcher watcher = new FileSystemWatcher(folderPath);

        watcher.Filter = "*.*"; 
        watcher.NotifyFilter = NotifyFilters.FileName | NotifyFilters.CreationTime;
        watcher.EnableRaisingEvents = true;

        watcher.Created += async (sender, e) =>
        {
            Console.WriteLine($"New File: {e.Name}");
            FileName = e.Name;
            FilePath = Path.Combine(folderPath, FileName);

            if (System.IO.File.Exists(FilePath))
            {
                var imageBytes = await System.IO.File.ReadAllBytesAsync(FilePath);

                ML_Tech.ModelInput sampleData = new ML_Tech.ModelInput()
                {
                    ImageSource = imageBytes,
                };

                var sortedScoresWithLabel = ML_Tech.PredictAllLabels(sampleData);
                Console.WriteLine("Predictions:");

                Dictionary<string, float> predictions = new Dictionary<string, float>();

                foreach (var score in sortedScoresWithLabel)
                {
                        Console.WriteLine($"{score.Key,-40}{score.Value,-20}");
                        predictions[score.Key] = score.Value;
                   
                    
                }

                await SendPredictionsToApi(predictions);
                await Task.Delay(6000);
            }
        };

        Console.WriteLine("Waiting for files...");
        Console.ReadLine(); 
    }

    static async Task SendPredictionsToApi(Dictionary<string, float> predictions)
    {
        string apiUrl = "http://192.168.137.1:88/api/predictions"; 

        using HttpClient client = new HttpClient();
        string json = JsonSerializer.Serialize(predictions);
        StringContent content = new StringContent(json, Encoding.UTF8, "application/json");

        HttpResponseMessage response = await client.PostAsync(apiUrl, content);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Predictions sent successfully.");
        }
        else
        {
            Console.WriteLine($"Error sending predictions: {response.StatusCode}");
        }
    }
}

